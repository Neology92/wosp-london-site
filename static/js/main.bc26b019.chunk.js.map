{"version":3,"sources":["Assets/Images/logo.svg","Assets/Images/cheese.png","Assets/Images/dunno.png","Components/Logo.js","Components/Cheese.js","Components/Dunno.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","logo","className","alt","Cheese","cheese","Dunno","dunno","App","exact","path","component","to","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,iMCW5BC,EARF,WACT,OACI,6BACI,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,W,iBCKtCC,EARA,WACX,OACI,6BACI,yBAAKJ,IAAKK,IAAQH,UAAU,WAAWC,IAAI,a,iBCKxCG,EARD,WACV,OACI,6BACI,yBAAKN,IAAKO,IAAOL,UAAU,WAAWC,IAAI,Y,MC2CvCK,MA3Cf,WACI,OACI,kBAAC,IAAD,KACI,yBAAKN,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAASC,UAAWL,IACtC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,UAAUC,UAAWP,KAE3C,2BACI,4BACI,4BACI,kBAAC,IAAD,CAAMF,UAAU,WAAWU,GAAG,KAA9B,SAIJ,4BACI,kBAAC,IAAD,CAAMV,UAAU,WAAWU,GAAG,UAA9B,UAIJ,4BACI,kBAAC,IAAD,CAAMV,UAAU,WAAWU,GAAG,WAA9B,aAMZ,uBACIV,UAAU,WACVW,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,mBCtBAC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCbZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.bc26b019.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cheese.22cb1356.png\";","module.exports = __webpack_public_path__ + \"static/media/dunno.a6a28b1a.png\";","import React from 'react';\nimport logo from '../Assets/Images/logo.svg';\n\nconst Logo = () => {\n    return (\n        <div>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n    );\n};\n\nexport default Logo;\n","import React from 'react';\nimport cheese from '../Assets/Images/cheese.png';\n\nconst Cheese = () => {\n    return (\n        <div>\n            <img src={cheese} className=\"App-logo\" alt=\"cheese\" />\n        </div>\n    );\n};\n\nexport default Cheese;\n","import React from 'react';\nimport dunno from '../Assets/Images/dunno.png';\n\nconst Dunno = () => {\n    return (\n        <div>\n            <img src={dunno} className=\"App-logo\" alt=\"dunno\" />\n        </div>\n    );\n};\n\nexport default Dunno;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { Logo, Dunno, Cheese } from './Components';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Switch>\n                        <Route exact path=\"/\" component={Logo} />\n                        <Route exact path=\"/dunno\" component={Dunno} />\n                        <Route exact path=\"/cheese\" component={Cheese} />\n                    </Switch>\n                    <p>\n                        <ul>\n                            <li>\n                                <Link className=\"App-link\" to=\"/\">\n                                    Home\n                                </Link>\n                            </li>\n                            <li>\n                                <Link className=\"App-link\" to=\"/dunno\">\n                                    Dunno\n                                </Link>\n                            </li>\n                            <li>\n                                <Link className=\"App-link\" to=\"/cheese\">\n                                    Cheese\n                                </Link>\n                            </li>\n                        </ul>\n                    </p>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                </header>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}